---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
    const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
    const { results } = (await resp.json()) as PokemonListResponse;

    return results.map(({ name, url }) => ({
        params: { name },
        props: { name, url },
    }));

    // return [
    //     {
    //         params: { name: "bulbasaur" },
    //         props: {
    //             name: "bulbasaur",
    //             url: "https://pokeapi.co/api/v2/pokemon/1/",
    //         },
    //     },
    //     {
    //         params: { name: "charmander" },
    //         props: {
    //             name: "charmander",
    //             url: "https://pokeapi.co/api/v2/pokemon/4/",
    //         },
    //     },
    // ];
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
    title={`Pokémon - #${id} ${name}`}
    description={`Información sobre el pokémon ${name}`}
    image={imageSrc}
>
    <section class="mt-10 mx-10 flex flex-col justify-center items-center">
        <div class="flex flex-row">
            <div>
                <button onclick="history.back()" class="text-blue-500"
                    >Regresar</button
                >
                <Title>{name}</Title>
            </div>
            <button
                id="btn-favorite"
                class="ml-4"
                data-name={name}
                data-id={id}
            >
                <Icon data-outline name="heart-outline" size={50} />
                <Icon data-bold class="hidden" name="heart-bold" size={50} />
            </button>
        </div>

        <PokemonCard name={name} url={url} isBig />

        <audio controls class="mt-5">
            <source src={audioSrc} type="audio/ogg" />
            Your browser does not support the audio element.
        </audio>
    </section>
</MainLayout>

<script>
    interface FavoritePokemon {
        name: string;
        id: number;
    }

    const handlePageLoad = () => {
        let favoritePokemons: FavoritePokemon[] = JSON.parse(
            localStorage.getItem("favorites") ?? "[]",
        );

        const btnFavorite = document.querySelector(
            "#btn-favorite",
        ) as HTMLButtonElement;

        if (!btnFavorite) return;

        const name = btnFavorite.dataset.name ?? "";
        const id = btnFavorite.dataset.id ?? "";

        const heartOutline = btnFavorite.querySelector(
            "[data-outline]",
        ) as HTMLElement;
        const heartBold = btnFavorite.querySelector(
            "[data-bold]",
        ) as HTMLElement;

        const isPokemonFavorite = () => {
            const isFavorite = favoritePokemons.some(
                (fav) => fav.name === name,
            );

            if (isFavorite) {
                console.log("Es favorito");
                heartBold.classList.toggle("hidden");
                heartOutline.classList.toggle("hidden");
            }
        };

        const toggleFavorite = () => {
            const isFavorite = favoritePokemons.some(
                (fav) => fav.name === name,
            );

            if (isFavorite) {
                // Remover
                favoritePokemons = favoritePokemons.filter(
                    (fav) => fav.name !== name,
                );
            } else {
                // Agregar
                favoritePokemons.push({
                    id: +id,
                    name: name,
                });
            }

            localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
        };

        btnFavorite.addEventListener("click", () => {
            heartBold.classList.toggle("hidden");
            heartOutline.classList.toggle("hidden");
            toggleFavorite();
        });

        isPokemonFavorite();
    };

    document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style scoped>
    /* @reference "../../styles/global.css"; */
    @reference "tailwindcss";

    a {
        @apply text-blue-500 hover:underline;
    }

    #btn-favorite {
        @apply hover:animate-pulse;
    }
</style>
